{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Presentaci\u00f3n","text":"<p>Mi nombre es Juan Manuel Gaona Serrano </p>"},{"location":"#descripcion","title":"Descripci\u00f3n","text":"<p>Actualmente me encuentro en mi primer semestre de ingenieria mecatronica en la universidad ibero Puebla.</p>"},{"location":"#habilidades","title":"Habilidades","text":"<p>Entre mis habilidades se encuentra el dise\u00f1o en 3D y uno de mis grandes hobbies es el basquetbol.</p>"},{"location":"#contacto","title":"Contacto","text":"<p>Puedes contactarme a trav\u00e9s del correo 204137@iberopuebla.mx o el n\u00famero 2229218870</p>"},{"location":"#logros","title":"Logros","text":"<p>Entre las cosas de las que me siento orgulloso es la obtenci\u00f3n de la beca de buscamos tu talento ganando el segundo lugar para mi carrera.</p>"},{"location":"Bit%C3%A1cora%20de%20Proyectos/","title":"Bit\u00e1cora de Proyectos - Juan Manuel Gaona Serrano","text":"<p>Este es el espacio donde documento y rastreo el progreso de mis diferentes proyectos como estudiante.</p>"},{"location":"Bit%C3%A1cora%20de%20Proyectos/#informacion-personal","title":"Informaci\u00f3n Personal","text":"<p>Nombre Completo: Juan Manuel Gaona Serrano</p> <p>Ocupaci\u00f3n: Estudiante de Ingenier\u00eda Mecatr\u00f3nica en la Universidad Iberoamericana (IBERO)</p> <p>Intereses: Rob\u00f3tica, electronica, automatizaci\u00f3n, programaci\u00f3n, dise\u00f1o e impresi\u00f3n 3d.</p>"},{"location":"Bit%C3%A1cora%20de%20Proyectos/#proyectos-en-curso","title":"Proyectos en Curso","text":"<p>A continuaci\u00f3n, se presentan los tres proyectos principales en los que estoy trabajando o he completado. Haz clic en el t\u00edtulo de cada proyecto para ver su repositorio dedicado.</p> <ol> <li>Conexi\u00f3n de ESP32</li> </ol> <p>Proyecto 1</p> <ol> <li>Uso de motores y servomotres</li> </ol> <p>[Proyecto 2](</p> <ol> <li>Carro con llantas omnidireccionales</li> </ol> <p>[Proyecto 3](</p>"},{"location":"Bit%C3%A1cora%20de%20Proyectos/#contacto","title":"Contacto","text":"<p>Puedes contactarme a trav\u00e9s de mi Correo Electr\u00f3nico o por mi n\u00famero de celular.</p> <p>Correo electronico: juangaona712@gmail.com</p> <p>N\u00famero de celular: 2229218870</p>"},{"location":"Proyecto%201/","title":"\ud83d\udcda Proyecto 1","text":""},{"location":"Proyecto%201/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Conexi\u00f3n de ESP32 </li> <li>Equipo / Autor(es): Juan Manuel Gaona Serrano </li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatronica </li> <li>Fecha: 13/09/2025 </li> <li>Descripci\u00f3n breve: En este proyecto utilizamos un ESP32 para cargarle diferentes codigos y prender un led de diferentes formas, todo con el fin de aprender a utilizar la placa.</li> </ul>"},{"location":"Proyecto%201/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Conectar la placa con un celular usando una se\u00f1al de bluetooth.</li> <li>Espec\u00edficos:</li> <li>Codigo de conexi\u00f3n bluetooth</li> <li>Uso de la placa ESP32</li> <li>Cargar codigo a placa</li> </ul>"},{"location":"Proyecto%201/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Codigo para conectar la placa al celular.</li> <li>No incluye: La conexi\u00f3n del led en la protoboard.</li> </ul>"},{"location":"Proyecto%201/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Phyton - Serial Bluetooth Terminal.</p> <p>Hardware (si aplica) - ESP32 - Foco led - Protoboard - Resistencia de 220</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica - Electr\u00f3nica b\u00e1sica</p>"},{"location":"Proyecto%201/#5-instalacion","title":"5) Instalaci\u00f3n","text":"<p><pre><code>ich_sep12a ino\nconst int led - 13;\nconst int btn = 12;\nvoid setup() {\n//inicio la concat\nSerial.begin(115200);\npinMode(led, OUTPUT);\npinMode(btn, INPUT);\nvoid loop() {\nint estado digitalRead(btn);\nif (estado 1) (\ndigitalWrite(led, 1);\nSerial.println(\"ON\");\n} else {\ndigitalWrite(led, 0);\nSerial.println(\"OFF\");\n</code></pre> Se cargo este c\u00f3digo a la placa ESP32 donde colocamos un bot\u00f3n para prender el led usando un bot\u00f3n.</p> <p>Video Uso del programa</p> <p><pre><code>const int LED = 13;\n#include \"BluetoothSerial.h\"\nBluetoothSerial SerialBT;\n\nvoid setup() {\n}\n\npinMode (13,OUTPUT);\nSerial.begin(115200);\nSerialBT.begin(\"ESP32juans\"); // Nombre del dispositivo Bluetooth\n\nvoid loop() {\nif (SerialBT.available()) {\nString mensaje SerialBT.readString();\nSerial.println(\"Recibido:\" + mensaje);\nif (mensaje == \"1\") {\n}\n\ndigitalWrite(LED, HIGH);\n\nelse {\ndigitalWrite(LED, LOW);\ndelay(1000);\n}\n</code></pre> Este c\u00f3digo fue el que se us\u00f3 para conectar la placa con el celular usando bluetooth, una vez cargado el c\u00f3digo se instal\u00f3 la aplicaci\u00f3n Serial Bluetooth Terminal en un dispositivo android y simplemente se hicieron las conexiones de acuerdo a los pines, se vincul\u00f3 el dispositivo con el nombre que se le dio en el c\u00f3digo en el caso juans y se mand\u00f3 un 1 o un 0 para prender o apagar el led.</p> <p>Video Uso del programa</p>"},{"location":"Proyecto%202/","title":"\ud83d\udcda Proyecto 2","text":""},{"location":"Proyecto%202/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Uso de motores y servomotres </li> <li>Equipo / Autor(es): Juan Manuel Gaona Serrano </li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatronica </li> <li>Fecha: 26/09/2025 </li> <li>Descripci\u00f3n breve: En este proyecto utilizamos motores y servomotores para poder controlarlos.</li> </ul>"},{"location":"Proyecto%202/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Aprender a usar los motores y servomoters.</li> <li>Espec\u00edficos:</li> <li>Conexiones de motores y servomotores</li> <li>Uso de la placa ESP32</li> <li>Cargar codigo a placa</li> </ul>"},{"location":"Proyecto%202/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Codigo y conexi\u00f3n para utilizar los motores y servomotores.</li> <li>No incluye: El uso de fuente de poder.</li> </ul>"},{"location":"Proyecto%202/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Phyton</p> <p>Hardware (si aplica) - ESP32 - motor pololu - servomotor</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica - Electr\u00f3nica b\u00e1sica</p>"},{"location":"Proyecto%202/#5-instalacion","title":"5) Instalaci\u00f3n","text":"<p><pre><code>#define in1 18\n\n#define in1 19\n\nvoid setup() {\n\n// put your setup code here, to run once:\n\npinMode(in1, OUTPUT);\n\npinMode(in2, OUTPUT);\n\n}\n\nvoid loop() {\n\n/*\n\n1.-Motor avance en una direccion durante 4 segs\n\n2.-Pare 2segs\n\n3.-Motor avanza en direccion opuesta\n\n*/\n\n//Avance cw\n\ndigitalWrite(in1, 1);\n\ndigitalWrite(in2, 0);\n\ndelay(4000);\n\ndigitalWrite(in1, 0);\n\ndigitalWrite(in2, 0);\n\ndelay(2000);\n\ndigitalWrite(in1, 0);\n\ndigitalWrite(in2, 1);\n\ndelay(4000);\n\n\n}\n</code></pre> Con este c\u00f3digo se logra mover un motor a un lado durante 4 segundos y despu\u00e9s se mueve al otro lado durante otros 4 segundos.</p> <p>Video Uso del programa</p> <p><pre><code>#define in1 18\n\n#define in2 19\n\n#define pum 21\n\nvoid setup() (\n\n// put your setup code here, to run once\n\npinMode(in1, OUTPUT);\n\npinMode(in2, OUTPUT);\n\nledcAttach(pum, 1000,8);\n\nvoid loop() {\n\n// put your main code here, to run repeatedly:\n\nfor(int i=0; 1 &lt;= 255; 1++){\n\n}\n\nledcwrite(pwm,1);;\n\ndigitalwrite(in1,1);\n\ndigitalWrite(in2,0);\n\ndeley(400);\n\ndigitalWrite(in1,0);\n\ndigitalwrite(in1,0);\n\ndelay(200);\n\ndigitalwrite(in1,0);\n\ndigitalWrite(in1,1);\n\ndelay\u00a0(400)\n}\n</code></pre> Con este c\u00f3digo se logra acelerar y desacelerar de un lado a otro usando un motor.</p> <p>Video Uso del programa</p> <p><pre><code> ep26d.ino\n\nESP32 Wrover Module\n\n/Control de 1 solo motor/\n\n#define pwm 12 //Definicion de pin de Velocidad\n\nint duty = 0;\n\nint grados = theta\n\nint aumento = 0;\n\nvoid setup() {\n\n}\n\n/Declarar Pines Como salida/\n\n/*Configuracion de pin PWM\n\nSe conecta al pin 12(pwm)\n\n- Frecuencia de 50hz\n\nResolucion de 12 bit (0-4096)\n\nCanal 8\n\nledcAttachChannel (pwm, 50, 12, 0);\n\nSerial.begin(115200);\n\nvoid loop() {\n\n/*\n\nServo trabaja del 5% al ~10% del total\n\n(- 5)% - 0 deg\n\n(- 16)% - 180 deg\n\n5% de 4096 = 204.8\n\n10% de 4 theta96=4 theta9.6\n\nfor(int i = 0 i &lt;= 180 ; i +=10) {\n\naumento\u00a0=\u00a0i;\n\ngrados=0;\n\nduty map(grados, 0, 180, 205, 410);\n\nSerial.print(\"Pos: \");\n\nSerial.println(duty);\n\nledcWrite(pwm, duty);\n\ndelay(500);\n\nduty map(aumento, 0, 180, 205, 410);\n\nSerial.print(\"Pos: \");\n\nSerial.println(duty);\n\nSerial.println(aumento);\n\nledcWrite(pwm, duty);\n\ndelay(500);\n\n}\n\n}\n</code></pre> Este c\u00f3digo fue utilizado para controlar un servomotor, su funci\u00f3n es avanzar 10 grados y regresar a 0, avanzar otros 10 y regresar a 0 y as\u00ed sucesivamente.</p> <p>Video Uso del programa</p>"},{"location":"Proyecto%203/","title":"\ud83d\udcda Proyecto 1","text":""},{"location":"Proyecto%203/#1-resumen","title":"1) Resumen","text":"<ul> <li>Nombre del proyecto: Carro con llantas omnidireccionales </li> <li>Equipo / Autor(es): Juan Manuel Gaona Serrano </li> <li>Curso / Asignatura: Introducci\u00f3n a la mecatronica </li> <li>Fecha: 17/10/2025 </li> <li>Descripci\u00f3n breve: En este proyecto realizamos un carro control remoto con contorl de xbox y ruedas omnidireccionales.</li> </ul>"},{"location":"Proyecto%203/#2-objetivos","title":"2) Objetivos","text":"<ul> <li>General: Crear un carro para competir en un torneo de futbol.</li> <li>Espec\u00edficos:</li> <li>C\u00f3digo de conexi\u00f3n a xbox</li> <li>Dise\u00f1o en 3D</li> <li>C\u00f3digo de llantas omnidereccionales</li> </ul>"},{"location":"Proyecto%203/#3-alcance-y-exclusiones","title":"3) Alcance y Exclusiones","text":"<ul> <li>Incluye: Codigo para conectar el control de xbox a ESP32. Modelo 3d de las partes del carro. Codigo de movimiento llantas omniderrcionales.</li> <li>No incluye: La conexi\u00f3n del carro.</li> </ul>"},{"location":"Proyecto%203/#4-requisitos","title":"4) Requisitos","text":"<p>Software - Solidwords - C++</p> <p>Hardware (si aplica) - ESP32 - Control de xbox - Protoboard - Resistencias, cables - 4 pilas recargables tipo C - 4 llantas omniderccionales - 4 motores DC 3</p> <p>Conocimientos previos - Programaci\u00f3n b\u00e1sica - Electr\u00f3nica b\u00e1sica - Dise\u00f1o en 3d basico</p>"},{"location":"Proyecto%203/#5-instalacion","title":"5) Instalaci\u00f3n","text":""},{"location":"Proyecto%203/#codigo-para-conectar-la-placa-esp32-a-el-control-de-xbox-para-mover-los-cuatro-motores","title":"Codigo para conectar la placa ESP32 a el control de xbox para mover los cuatro motores","text":"<pre><code>// ====== Control 4xM con Xbox (Bluepad32 + ESP32) ======\n#include &lt;Bluepad32.h&gt;\n\n// ================== Pines actualizados ==================\n// Trasero Izquierdo (RL)\n#define MI1 12\n#define MI2 14\n// Trasero Derecho (RR)\n#define MD1 27\n#define MD2 26\n// Delantero Derecho (FR)\n#define MI3 5\n#define MI4 18\n// Delantero Izquierdo (FL)\n#define MD3 17\n#define MD4 16\n\n// === (OPCIONAL) Pines de ENABLE del driver ===\n// L298N/L293D: ENA habilita un lado, ENB el otro.\n// Si tu placa ya trae jumpers a 5V, puedes comentar estas 3 l\u00edneas:\n#define ENA 32\n#define ENB 33\n#define USE_ENABLE_PINS 1\n\n// === (OPCIONAL) TB6612FNG (descomenta si lo usas) ===\n// #define STBY 25   // poner HIGH\n// #define USE_TB6612 1\n\nconst int motores[] = { MI1, MI2, MD1, MD2, MI3, MI4, MD3, MD4 };\n\n// ======== Bluepad32 ========\nGamepadPtr pads[BP32_MAX_GAMEPADS];\n\n// Deadzone m\u00e1s chica\nconst int DEADZONE = 80;\n\n// ================== PROTOTIPOS ==================\nvoid avanza();\nvoid atras();\nvoid izquierda();\nvoid derecha();\nvoid diagonal_derecha();\nvoid diagonal_izquierda();\nvoid horizontal_derecha();\nvoid horizontal_izquierda();\nvoid giro_rotacional();\nvoid detener();\n\n// ================== CALLBACKS BLUEPAD ==================\nvoid onConnectedGamepad(GamepadPtr gp) {\n  Serial.println(\"Gamepad conectado!\");\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    if (!pads[i]) { pads[i] = gp; break; }\n  }\n}\nvoid onDisconnectedGamepad(GamepadPtr gp) {\n  Serial.println(\"Gamepad desconectado!\");\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    if (pads[i] == gp) { pads[i] = nullptr; break; }\n  }\n}\n\n// ================== SETUP ==================\nvoid setup() {\n  Serial.begin(115200);\n\n  for (int i = 0; i &lt; 8; i++) pinMode(motores[i], OUTPUT);\n  detener();\n\n  // Habilita driver\n  #ifdef USE_TB6612\n    pinMode(STBY, OUTPUT);\n    digitalWrite(STBY, HIGH);   // TB6612: salir de standby\n  #endif\n  #ifdef USE_ENABLE_PINS\n    pinMode(ENA, OUTPUT);\n    pinMode(ENB, OUTPUT);\n    digitalWrite(ENA, HIGH);    // habilita lado A (puedes usar PWM luego)\n    digitalWrite(ENB, HIGH);    // habilita lado B\n  #endif\n\n  BP32.setup(&amp;onConnectedGamepad, &amp;onDisconnectedGamepad);\n  BP32.enableNewBluetoothConnections(true);\n\n  Serial.println(\"Listo. Motores + Bluepad32 inicializados.\");\n  Serial.println(\"Pon el control de Xbox en modo vinculaci\u00f3n (bot\u00f3n pair).\");\n}\n\n// ================== LOOP ==================\nvoid loop() {\n  BP32.update();\n\n  bool hayAccion = false;\n\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    GamepadPtr gp = pads[i];\n    if (!gp || !gp-&gt;isConnected()) continue;\n\n    int lx = gp-&gt;axisX();   // -511 .. 511\n    int ly = gp-&gt;axisY();\n    int rx = gp-&gt;axisRX();\n\n    // Debug b\u00e1sico\n    static uint32_t tLast = 0;\n    if (millis() - tLast &gt; 250) {\n      tLast = millis();\n      Serial.print(\"LX:\"); Serial.print(lx);\n      Serial.print(\"  LY:\"); Serial.print(ly);\n      Serial.print(\"  RX:\"); Serial.print(rx);\n      Serial.print(\"  DPad:\"); Serial.println(gp-&gt;dpad(), HEX);\n    }\n\n    // Bot\u00f3n B: test r\u00e1pido para comprobar que el driver recibe se\u00f1al\n    if (gp-&gt;b()) {\n      Serial.println(\"TEST: avanza 1s\");\n      avanza();\n      delay(1000);\n      detener();\n      delay(200);\n      hayAccion = true;\n      break;\n    }\n\n    // Bot\u00f3n A: detener\n    if (gp-&gt;a()) { Serial.println(\"DETENER\"); detener(); hayAccion = true; break; }\n\n    // D-Pad: acciones discretas prioritarias\n    uint8_t d = gp-&gt;dpad();\n    if (d) {\n      if (d &amp; DPAD_UP &amp;&amp; d &amp; DPAD_RIGHT)      { Serial.println(\"DIAG DER\"); diagonal_derecha(); }\n      else if (d &amp; DPAD_UP &amp;&amp; d &amp; DPAD_LEFT)  { Serial.println(\"DIAG IZQ\"); diagonal_izquierda(); }\n      else if (d &amp; DPAD_RIGHT)                { Serial.println(\"HORIZ DER\"); horizontal_derecha(); }\n      else if (d &amp; DPAD_LEFT)                 { Serial.println(\"HORIZ IZQ\"); horizontal_izquierda(); }\n      else if (d &amp; DPAD_UP)                   { Serial.println(\"AVANZA\"); avanza(); }\n      else if (d &amp; DPAD_DOWN)                 { Serial.println(\"ATRAS\"); atras(); }\n      hayAccion = true;\n      break;\n    }\n\n    // Sticks anal\u00f3gicos\n    bool movY = abs(ly) &gt; DEADZONE;\n    bool movX = abs(lx) &gt; DEADZONE;\n    bool rot  = abs(rx) &gt; DEADZONE;\n\n    if (rot) {\n      Serial.println(rx &gt; 0 ? \"GIRO -&gt;\" : \"GIRO &lt;-\");\n      giro_rotacional();  // si quieres sentido opuesto, crea otra funci\u00f3n invertida\n      hayAccion = true;\n      break;\n    }\n\n    if (movY &amp;&amp; !movX) {\n      Serial.println(ly &lt; 0 ? \"AVANZA\" : \"ATRAS\");\n      if (ly &lt; 0) avanza(); else atras();\n      hayAccion = true;\n      break;\n    }\n\n    if (movX &amp;&amp; !movY) {\n      Serial.println(lx &gt; 0 ? \"HORIZ DER\" : \"HORIZ IZQ\");\n      if (lx &gt; 0) horizontal_derecha(); else horizontal_izquierda();\n      hayAccion = true;\n      break;\n    }\n\n    if (movX &amp;&amp; movY) {\n      Serial.println(lx &gt; 0 ? \"DIAG DER\" : \"DIAG IZQ\");\n      if (lx &gt; 0) diagonal_derecha(); else diagonal_izquierda();\n      hayAccion = true;\n      break;\n    }\n  }\n\n  if (!hayAccion) detener();\n\n  delay(10);\n}\n\n// ================== FUNCIONES DE CONTROL ==================\nvoid MIARRIBA1() { digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW); }\nvoid MIABAJO1()  { digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW); }\nvoid MDARRIBA1() { digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW); }\nvoid MDABAJO1()  { digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW); }\n\nvoid MIARRIBA0() { digitalWrite(MI1, LOW); digitalWrite(MI2, HIGH); }\nvoid MIABAJO0()  { digitalWrite(MI3, LOW); digitalWrite(MI4, HIGH); }\nvoid MDARRIBA0() { digitalWrite(MD1, LOW); digitalWrite(MD2, HIGH); }\nvoid MDABAJO0()  { digitalWrite(MD3, LOW); digitalWrite(MD4, HIGH); }\n\nvoid avanza() { MIARRIBA1(); MIABAJO1(); MDARRIBA1(); MDABAJO1(); }\nvoid atras()  { MIARRIBA0(); MIABAJO0(); MDARRIBA0(); MDABAJO0(); }\nvoid izquierda() {\n  MIARRIBA0(); MIABAJO1();\n  MDARRIBA0(); MDABAJO1();\n}\nvoid derecha() {\n  MIARRIBA1(); MIABAJO0();\n  MDARRIBA0(); MDABAJO1();\n}\nvoid diagonal_derecha() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, LOW);\n  digitalWrite(MI3, LOW);  digitalWrite(MI4, LOW);\n  digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW);\n}\nvoid diagonal_izquierda() {\n  digitalWrite(MI1, LOW);  digitalWrite(MI2, LOW);\n  digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, LOW);\n}\nvoid horizontal_derecha() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, HIGH);\n  digitalWrite(MI3, LOW);  digitalWrite(MI4, HIGH);\n  digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW);\n}\nvoid horizontal_izquierda() {\n  digitalWrite(MI1, LOW);  digitalWrite(MI2, HIGH);\n  digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, HIGH);\n}\nvoid giro_rotacional() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, HIGH);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, HIGH);\n}\nvoid detener() {\n  for (int i = 0; i &lt; 8; i++) digitalWrite(motores[i],\u00a0LOW);\n}\n</code></pre> <p>Video Uso del programa</p>"},{"location":"Proyecto%203/#codigo-para-el-movimiento-de-las-llantas-omnidireccionales","title":"C\u00f3digo para el movimiento de las llantas omnidireccionales","text":"<pre><code>// ====== Control 4xM con Xbox (Bluepad32 + ESP32) ======\n#include &lt;Bluepad32.h&gt;\n\n// ================== Pines actualizados ==================\n// Trasero Izquierdo (RL)\n#define MI1 12\n#define MI2 14\n// Trasero Derecho (RR)\n#define MD1 27\n#define MD2 26\n// Delantero Derecho (FR)\n#define MI3 5\n#define MI4 18\n// Delantero Izquierdo (FL)\n#define MD3 17\n#define MD4 16\n\n// === (OPCIONAL) Pines de ENABLE del driver ===\n// L298N/L293D: ENA habilita un lado, ENB el otro.\n// Si tu placa ya trae jumpers a 5V, puedes comentar estas 3 l\u00edneas:\n#define ENA 32\n#define ENB 33\n#define USE_ENABLE_PINS 1\n\n// === (OPCIONAL) TB6612FNG (descomenta si lo usas) ===\n// #define STBY 25   // poner HIGH\n// #define USE_TB6612 1\n\nconst int motores[] = { MI1, MI2, MD1, MD2, MI3, MI4, MD3, MD4 };\n\n// ======== Bluepad32 ========\nGamepadPtr pads[BP32_MAX_GAMEPADS];\n\n// Deadzone m\u00e1s chica\nconst int DEADZONE = 80;\n\n// ================== PROTOTIPOS ==================\nvoid avanza();\nvoid atras();\nvoid izquierda();\nvoid derecha();\nvoid diagonal_derecha();\nvoid diagonal_izquierda();\nvoid horizontal_derecha();\nvoid horizontal_izquierda();\nvoid giro_rotacional();\nvoid detener();\n\n// ================== CALLBACKS BLUEPAD ==================\nvoid onConnectedGamepad(GamepadPtr gp) {\n  Serial.println(\"Gamepad conectado!\");\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    if (!pads[i]) { pads[i] = gp; break; }\n  }\n}\nvoid onDisconnectedGamepad(GamepadPtr gp) {\n  Serial.println(\"Gamepad desconectado!\");\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    if (pads[i] == gp) { pads[i] = nullptr; break; }\n  }\n}\n\n// ================== SETUP ==================\nvoid setup() {\n  Serial.begin(115200);\n\n  for (int i = 0; i &lt; 8; i++) pinMode(motores[i], OUTPUT);\n  detener();\n\n  // Habilita driver\n  #ifdef USE_TB6612\n    pinMode(STBY, OUTPUT);\n    digitalWrite(STBY, HIGH);   // TB6612: salir de standby\n  #endif\n  #ifdef USE_ENABLE_PINS\n    pinMode(ENA, OUTPUT);\n    pinMode(ENB, OUTPUT);\n    digitalWrite(ENA, HIGH);    // habilita lado A (puedes usar PWM luego)\n    digitalWrite(ENB, HIGH);    // habilita lado B\n  #endif\n\n  BP32.setup(&amp;onConnectedGamepad, &amp;onDisconnectedGamepad);\n  BP32.enableNewBluetoothConnections(true);\n\n  Serial.println(\"Listo. Motores + Bluepad32 inicializados.\");\n  Serial.println(\"Pon el control de Xbox en modo vinculaci\u00f3n (bot\u00f3n pair).\");\n}\n\n// ================== LOOP ==================\nvoid loop() {\n  BP32.update();\n\n  bool hayAccion = false;\n\n  for (int i = 0; i &lt; BP32_MAX_GAMEPADS; i++) {\n    GamepadPtr gp = pads[i];\n    if (!gp || !gp-&gt;isConnected()) continue;\n\n    int lx = gp-&gt;axisX();   // -511 .. 511\n    int ly = gp-&gt;axisY();\n    int rx = gp-&gt;axisRX();\n\n    // Debug b\u00e1sico\n    static uint32_t tLast = 0;\n    if (millis() - tLast &gt; 250) {\n      tLast = millis();\n      Serial.print(\"LX:\"); Serial.print(lx);\n      Serial.print(\"  LY:\"); Serial.print(ly);\n      Serial.print(\"  RX:\"); Serial.print(rx);\n      Serial.print(\"  DPad:\"); Serial.println(gp-&gt;dpad(), HEX);\n    }\n\n    // Bot\u00f3n B: test r\u00e1pido para comprobar que el driver recibe se\u00f1al\n    if (gp-&gt;b()) {\n      Serial.println(\"TEST: avanza 1s\");\n      avanza();\n      delay(1000);\n      detener();\n      delay(200);\n      hayAccion = true;\n      break;\n    }\n\n    // Bot\u00f3n A: detener\n    if (gp-&gt;a()) { Serial.println(\"DETENER\"); detener(); hayAccion = true; break; }\n\n    // D-Pad: acciones discretas prioritarias\n    uint8_t d = gp-&gt;dpad();\n    if (d) {\n      if (d &amp; DPAD_UP &amp;&amp; d &amp; DPAD_RIGHT)      { Serial.println(\"DIAG DER\"); diagonal_derecha(); }\n      else if (d &amp; DPAD_UP &amp;&amp; d &amp; DPAD_LEFT)  { Serial.println(\"DIAG IZQ\"); diagonal_izquierda(); }\n      else if (d &amp; DPAD_RIGHT)                { Serial.println(\"HORIZ DER\"); horizontal_derecha(); }\n      else if (d &amp; DPAD_LEFT)                 { Serial.println(\"HORIZ IZQ\"); horizontal_izquierda(); }\n      else if (d &amp; DPAD_UP)                   { Serial.println(\"AVANZA\"); avanza(); }\n      else if (d &amp; DPAD_DOWN)                 { Serial.println(\"ATRAS\"); atras(); }\n      hayAccion = true;\n      break;\n    }\n\n    // Sticks anal\u00f3gicos\n    bool movY = abs(ly) &gt; DEADZONE;\n    bool movX = abs(lx) &gt; DEADZONE;\n    bool rot  = abs(rx) &gt; DEADZONE;\n\n    if (rot) {\n      Serial.println(rx &gt; 0 ? \"GIRO -&gt;\" : \"GIRO &lt;-\");\n      giro_rotacional();  // si quieres sentido opuesto, crea otra funci\u00f3n invertida\n      hayAccion = true;\n      break;\n    }\n\n    if (movY &amp;&amp; !movX) {\n      Serial.println(ly &lt; 0 ? \"AVANZA\" : \"ATRAS\");\n      if (ly &lt; 0) avanza(); else atras();\n      hayAccion = true;\n      break;\n    }\n\n    if (movX &amp;&amp; !movY) {\n      Serial.println(lx &gt; 0 ? \"HORIZ DER\" : \"HORIZ IZQ\");\n      if (lx &gt; 0) horizontal_derecha(); else horizontal_izquierda();\n      hayAccion = true;\n      break;\n    }\n\n    if (movX &amp;&amp; movY) {\n      Serial.println(lx &gt; 0 ? \"DIAG DER\" : \"DIAG IZQ\");\n      if (lx &gt; 0) diagonal_derecha(); else diagonal_izquierda();\n      hayAccion = true;\n      break;\n    }\n  }\n\n  if (!hayAccion) detener();\n\n  delay(10);\n}\n\n// ================== FUNCIONES DE CONTROL ==================\nvoid MIARRIBA1() { digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW); }\nvoid MIABAJO1()  { digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW); }\nvoid MDARRIBA1() { digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW); }\nvoid MDABAJO1()  { digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW); }\n\nvoid MIARRIBA0() { digitalWrite(MI1, LOW); digitalWrite(MI2, HIGH); }\nvoid MIABAJO0()  { digitalWrite(MI3, LOW); digitalWrite(MI4, HIGH); }\nvoid MDARRIBA0() { digitalWrite(MD1, LOW); digitalWrite(MD2, HIGH); }\nvoid MDABAJO0()  { digitalWrite(MD3, LOW); digitalWrite(MD4, HIGH); }\n\nvoid avanza() { MIARRIBA1(); MIABAJO1(); MDARRIBA1(); MDABAJO1(); }\nvoid atras()  { MIARRIBA0(); MIABAJO0(); MDARRIBA0(); MDABAJO0(); }\nvoid izquierda() {\n  MIARRIBA0(); MIABAJO1();\n  MDARRIBA0(); MDABAJO1();\n}\nvoid derecha() {\n  MIARRIBA1(); MIABAJO0();\n  MDARRIBA0(); MDABAJO1();\n}\nvoid diagonal_derecha() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, LOW);\n  digitalWrite(MI3, LOW);  digitalWrite(MI4, LOW);\n  digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW);\n}\nvoid diagonal_izquierda() {\n  digitalWrite(MI1, LOW);  digitalWrite(MI2, LOW);\n  digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, LOW);\n}\nvoid horizontal_derecha() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, HIGH);\n  digitalWrite(MI3, LOW);  digitalWrite(MI4, HIGH);\n  digitalWrite(MD3, HIGH); digitalWrite(MD4, LOW);\n}\nvoid horizontal_izquierda() {\n  digitalWrite(MI1, LOW);  digitalWrite(MI2, HIGH);\n  digitalWrite(MD1, HIGH); digitalWrite(MD2, LOW);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, HIGH);\n}\nvoid giro_rotacional() {\n  digitalWrite(MI1, HIGH); digitalWrite(MI2, LOW);\n  digitalWrite(MD1, LOW);  digitalWrite(MD2, HIGH);\n  digitalWrite(MI3, HIGH); digitalWrite(MI4, LOW);\n  digitalWrite(MD3, LOW);  digitalWrite(MD4, HIGH);\n}\nvoid detener() {\n  for (int i = 0; i &lt; 8; i++) digitalWrite(motores[i],\u00a0LOW);\n}\n</code></pre> <p>Video Uso del programa</p> <p>Video 2</p>"},{"location":"Proyecto%203/#diseno-de-la-base-para-el-carro","title":"Dise\u00f1o de la base para el carro","text":"<p>Dise\u00f1amos el carro en solidwords dejando las medidas de las llantas y colocando agujeros en toda la pieza con la finalidad de pasar cables, adem\u00e1s de dejar ranuras donde se va a ensamblar el carro usando unas paredes que se le adaptaron unos orificios para conectar los motores con la estructura usando tornillos.</p>"},{"location":"Proyecto%203/#modelos-para-corte-laser-en-dxf","title":"Modelos para corte laser en dxf","text":"<p>Base carro.DXF</p> <p>Paredes carro.DXF</p> <p></p>"},{"location":"Proyecto%203/#video-de-resultado-final","title":"Video de resultado final","text":"<p>Resultado final</p> <p></p>"},{"location":"comandos/","title":"Encabezados","text":"<pre><code># T\u00edtulo H1\n## T\u00edtulo H2\n### T\u00edtulo H3\n</code></pre>"},{"location":"comandos/#titulo-h1","title":"T\u00edtulo H1","text":""},{"location":"comandos/#titulo-h2","title":"T\u00edtulo H2","text":""},{"location":"comandos/#titulo-h3","title":"T\u00edtulo H3","text":""},{"location":"comandos/#enfasis-y-codigo-en-linea","title":"\u00c9nfasis y c\u00f3digo en l\u00ednea","text":"<pre><code>**negritas**, *cursivas*, ~~tachado~~, `c\u00f3digo en l\u00ednea`\n</code></pre> <p>negritas, cursivas, ~~tachado~~, <code>c\u00f3digo en l\u00ednea</code></p>"},{"location":"comandos/#citas-blockquote","title":"Citas (blockquote)","text":"<pre><code>&gt; Esta es una cita destacada.\n&gt; Puede tener m\u00faltiples l\u00edneas.\n</code></pre> <p>Esta es una cita destacada. Puede tener m\u00faltiples l\u00edneas.</p>"},{"location":"comandos/#enlaces","title":"Enlaces","text":"<pre><code>[Enlace directo](https://www.iberopuebla.mx/)\n\n[Texto del enlace de referencia][doc-ref]\n\n[doc-ref]: https://www.iberopuebla.mx//docs \"T\u00edtulo opcional\"\n</code></pre> <p>Enlace directo</p> <p>Texto del enlace de referencia</p>"},{"location":"comandos/#listas-vinetas-numeradas-y-de-tareas","title":"Listas: vi\u00f1etas, numeradas y de tareas","text":"<pre><code>- Item A\n    * Subitem A.1\n    * Subitem A.2\n- Item B\n    - Subitem B.1\n    - Subitem B.2\n\n1.  Paso 1\n    1.  Paso 1.1\n    2.  Paso 1.2\n        1.  Paso 1.2.1\n        2.  Paso 1.2.2\n\n- [x] Hecho\n- [ ] Pendiente\n</code></pre> <ul> <li>Item A<ul> <li>Subitem A.1</li> <li>Subitem A.2</li> </ul> </li> <li>Item B<ul> <li>Subitem B.1</li> <li>Subitem B.2</li> </ul> </li> </ul> <ol> <li> <p>Paso 1</p> <ol> <li>Paso 1.1</li> <li>Paso 1.2<ol> <li>Paso 1.2.1</li> <li>Paso 1.2.2</li> </ol> </li> </ol> </li> <li> <p> Hecho</p> </li> <li> Pendiente</li> </ol>"},{"location":"comandos/#tablas","title":"Tablas","text":"<pre><code>| Componente | Cant. | Nota        |\n|-----------:|:-----:|-------------|\n| Sensor X   | 2     | I2C         |\n| MCU Y      | 1     | WiFi/BLE    |\n</code></pre> Componente Cant. Nota Sensor X 2 I2C MCU Y 1 WiFi/BLE"},{"location":"comandos/#imagenes","title":"Im\u00e1genes","text":"<pre><code>![Diagrama del sistema](recursos/imgs/ibero.jpeg)\n\n&lt;!-- Control de tama\u00f1o usando HTML (cuando se requiera) --&gt;\n&lt;img src=\"../recursos/imgs/ibero.jpeg\" alt=\"Diagrama del sistema\" width=\"420\"&gt;\n</code></pre>"},{"location":"comandos/#pdfs-enlace-y-embebido","title":"PDFs (enlace y embebido)","text":"<pre><code>[Descargar especificaci\u00f3n (PDF)](recursos/archivos/Calendario.pdf)\n\n&lt;!-- Embed (requiere navegador compatible) --&gt;\n&lt;object data=\"recursos/archivos/Calendario.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600\"&gt;\n  &lt;p&gt;No se pudo mostrar el PDF. &lt;a href=\"../recursos/archivos/Calendario.pdf\"&gt;Descargar&lt;/a&gt;&lt;/p&gt;\n&lt;/object&gt;\n</code></pre> <p>Descargar especificaci\u00f3n (PDF)</p>"},{"location":"comandos/#admonitions-material","title":"Admonitions (Material)","text":"<pre><code>!!! note \"Nota\"\n    Esto es una nota informativa.\n\n!!! tip \"Sugerencia\"\n    Un consejo breve para el usuario.\n\n!!! warning \"Advertencia\"\n    Precauciones o riesgos a considerar.\n\n??? info \"M\u00e1s informaci\u00f3n (colapsable)\"\n    Contenido adicional que se puede expandir.\n</code></pre> <p>Nota</p> <p>Esto es una nota informativa.</p> <p>Sugerencia</p> <p>Un consejo breve para el usuario.</p> <p>Advertencia</p> <p>Precauciones o riesgos a considerar.</p> M\u00e1s informaci\u00f3n (colapsable) <p>Contenido adicional que se puede expandir.</p>"},{"location":"comandos/#codigo-con-resaltado","title":"C\u00f3digo con resaltado","text":"<p><pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre> <pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre></p>"},{"location":"comandos/#separador-horizontal","title":"Separador horizontal","text":"<pre><code>---\n</code></pre>"},{"location":"comandos/#listas-anidadas-con-codigo-y-notas","title":"Listas anidadas con c\u00f3digo y notas","text":"<pre><code>- **M\u00f3dulo A**\n  - Funci\u00f3n: `procesar()`\n  - Entrada:\n    - `signal` (float)\n    - `freq` (Hz)\n  - Salida:\n    - JSON con `valor`, `unidad`\n  - !!! note\n        Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> <ul> <li>M\u00f3dulo A</li> <li>Funci\u00f3n: <code>procesar()</code></li> <li>Entrada:<ul> <li><code>signal</code> (float)</li> <li><code>freq</code> (Hz)</li> </ul> </li> <li>Salida:<ul> <li>JSON con <code>valor</code>, <code>unidad</code></li> </ul> </li> <li> <p>Note</p> <pre><code>Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> </li> </ul>"},{"location":"comandos/#bloques-de-cita-con-codigo-pseudo-logs","title":"Bloques de cita con c\u00f3digo (pseudo-logs)","text":"<pre><code>&gt; **Log:**\n&gt; ```\n&gt; [12:00:00] Init OK\n&gt; [12:00:01] Conectando a I2C...\n&gt; [12:00:02] Lectura: 523 mV\n&gt; ```\n</code></pre> <p>Log: <pre><code>[12:00:00] Init OK\n[12:00:01] Conectando a I2C...\n[12:00:02] Lectura: 523 mV\n</code></pre></p>"},{"location":"gitcmds/","title":"\ud83d\ude80 Comandos b\u00e1sicos de Git (primeros pasos)","text":"<p>En este curso solo usaremos los comandos esenciales de Git para trabajar con repositorios.</p>"},{"location":"gitcmds/#1-clonar-un-repositorio","title":"1. Clonar un repositorio","text":"<p>Copia un proyecto de GitHub a tu computadora.</p> <pre><code>git clone https://github.com/usuario/repositorio.git\n</code></pre>"},{"location":"gitcmds/#2-verificar-cambios","title":"2. Verificar cambios","text":"<p>Muestra qu\u00e9 archivos has modificado o agregado.</p> <pre><code>git status\n</code></pre>"},{"location":"gitcmds/#3-preparar-cambios","title":"3. Preparar cambios","text":"<p>Agrega archivos para guardarlos en el pr\u00f3ximo commit.</p> <pre><code>git add archivo.txt\ngit add .   # agrega todos los archivos modificados\n</code></pre>"},{"location":"gitcmds/#4-guardar-cambios-commit","title":"4. Guardar cambios (commit)","text":"<p>Guarda tus cambios con un mensaje descriptivo.</p> <pre><code>git commit -m \"Descripci\u00f3n breve de los cambios\"\n</code></pre>"},{"location":"gitcmds/#5-subir-cambios-al-repositorio-push","title":"5. Subir cambios al repositorio (push)","text":"<p>Env\u00eda tus commits locales al repositorio en GitHub.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"gitcmds/#6-traer-cambios-del-remoto-pull","title":"6. Traer cambios del remoto (pull)","text":"<p>Actualiza tu proyecto con los \u00faltimos cambios de GitHub.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"gitcmds/#flujo-tipico-de-trabajo","title":"Flujo t\u00edpico de trabajo","text":"<ol> <li> <p>Traer cambios del remoto <pre><code>git pull origin main\n</code></pre></p> </li> <li> <p>Editar tus archivos de proyecto.</p> </li> <li> <p>Preparar los cambios <pre><code>git add .\n</code></pre></p> </li> <li> <p>Guardar los cambios <pre><code>git commit -m \"Mensaje descriptivo\"\n</code></pre></p> </li> <li> <p>Enviar los cambios al remoto <pre><code>git push origin main\n</code></pre></p> </li> </ol> <p>Consejo</p> <p>Piensa en este ciclo como un loop infinito: cada vez que quieras contribuir \u2192 primero <code>pull</code>, despu\u00e9s <code>add</code> + <code>commit</code>, y finalmente <code>push</code>.</p>"}]}